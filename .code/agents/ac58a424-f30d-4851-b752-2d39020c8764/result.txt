Right, I'll continue the xTweak Codex CLI implementation.

My plan is to:
1. Create the `scripts/codex/config.xtweak.toml` template.
2. Update `CLAUDE.md` and `AGENTS.md` to reference the new config.
3. Integrate setup instructions into existing tools like `Makefile`.
4. Consider adding a TOML validation script.

First, I'll create the `scripts/codex` directory.Okay, `scripts/codex` exists. Now, I'll create `scripts/codex/config.xtweak.toml`. I'll consult `docs/codex_profiles.md` for the planned content and start with a basic TOML structure. First, I'll read the `docs/codex_profiles.md` file.I erred; `docs/codex_profiles.md` is missing. I'll now search for similar files to locate the correct one and understand the project's structure.No `profiles.md` files found. I'll search the project for "codex" to find what I need.`Codex` references exist in `AGENTS.md`, `package.json`, and a few scripts. `AGENTS.md` appears to hold the key to creating the `config.xtweak.toml` file, as it contains setup instructions and a TOML example. I'll read it to understand the required structure.I'll create `scripts/codex/config.xtweak.toml`, mirroring the `tidewave` and `ash_ai` TOML structures from `AGENTS.md`. The file will include configurations for all three, with `/path/to/your/project` updated to the current directory. I'm creating the file now.Okay, I'll create `xtweak-stdio-proxy.js` now. I'll use `tidewave-stdio-proxy.js` and `ashai-stdio-proxy.js` as a template, starting by reading `tidewave-stdio-proxy.js`.Got it. I'm creating `scripts/mcp/xtweak-stdio-proxy.js` by copying `scripts/mcp/tidewave-stdio-proxy.js` and replacing all instances of "tidewave" and "TIDEWAVE" with "xtweak" and "XTWEAK".Okay, `xtweak-stdio-proxy.js` is done. Time to update the docs. I'll add a new `xtweak` MCP setup section to `AGENTS.md`, mirroring the `TideWave` and `Ash AI` instructions.Okay, I'm updating `AGENTS.md` now. I'll add the `xTweak` MCP setup, explain how to use `config.xtweak.toml`, and include a link to `CLAUDE.md`.`AGENTS.md` is updated. Now to check `CLAUDE.md` for necessary alignment, as requested.`CLAUDE.md` is fine; `AGENTS.md`'s reference is enough. I'll now focus on the user's request to integrate parity instructions. I'll check the `Makefile` to see if I can add a command for `~/.codex/config.toml` setup.Okay, I'll add a `codex-setup` target to the `Makefile`. It will check for `~/.codex/config.toml` and, if it's missing, copy `scripts/codex/config.xtweak.toml` there to simplify Codex CLI setup. I'm updating the `Makefile` now.I have completed the implementation of the Codex CLI parity plan. Here is a summary of the changes:

*   **Created `scripts/codex/config.xtweak.toml`:** This file provides a template for configuring the Codex CLI with the `tidewave`, `ash_ai`, and `xtweak` MCP servers.
*   **Created `scripts/mcp/xtweak-stdio-proxy.js`:** This script acts as a proxy between the Codex CLI and the `xtweak` MCP server.
*   **Updated `AGENTS.md`:** The documentation has been updated to include instructions on how to set up the `xtweak` MCP server with the Codex CLI, and it now references the new `config.xtweak.toml` file.
*   **Updated `Makefile`:** A `codex-setup` target has been added to the `Makefile` to automate the setup of the Codex CLI configuration.

These changes should make it easier for developers to use the `xtweak` profile with the Codex CLI.
