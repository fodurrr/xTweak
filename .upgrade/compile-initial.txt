==> castore
Compiling 1 file (.ex)
Generated castore app
==> mint
Compiling 1 file (.erl)
Compiling 20 files (.ex)
Generated mint app
==> elixir_make
Compiling 8 files (.ex)
Generated elixir_make app
==> earmark
Compiling 3 files (.erl)
Compiling 61 files (.ex)
Generated earmark app
==> conv_case
Compiling 1 file (.ex)
Generated conv_case app
==> picosat_elixir
make: Nothing to be done for 'all'.
Compiling 1 file (.erl)
Compiling 2 files (.ex)
Generated picosat_elixir app
==> sourceror
Compiling 12 files (.ex)
     warning: function apply_indentation_fix/2 is unused
     │
 176 │   defp apply_indentation_fix(source, opts) do
     │        ~
     │
     └─ lib/sourceror.ex:176:8: Sourceror (module)

Generated sourceror app
==> bcrypt_elixir
mkdir -p "/home/fodurrr/dev/xTweak/_build/dev/lib/bcrypt_elixir/priv"
gcc -g -O3 -Wall -Wno-format-truncation -I"/nix/store/9vb2nbx4wgbhcqcnrj93yxwyh7fy4bs8-erlang-28.1.1/lib/erlang/erts-16.1.1/include" -Ic_src -fPIC -shared  c_src/bcrypt_nif.c c_src/blowfish.c -o "/home/fodurrr/dev/xTweak/_build/dev/lib/bcrypt_elixir/priv/bcrypt_nif.so"
Compiling 3 files (.ex)
Generated bcrypt_elixir app
==> text_diff
Compiling 1 file (.ex)
Generated text_diff app
==> decimal
Compiling 4 files (.ex)
Generated decimal app
==> jason
Compiling 10 files (.ex)
Generated jason app
==> sobelow
Compiling 51 files (.ex)
Generated sobelow app
==> esbuild
Compiling 4 files (.ex)
Generated esbuild app
==> xema
Compiling 19 files (.ex)
Generated xema app
==> yaml_elixir
Compiling 6 files (.ex)
Generated yaml_elixir app
==> mix_audit
Compiling 16 files (.ex)
Generated mix_audit app
==> spitfire
Compiling 2 files (.erl)
Compiling 4 files (.ex)
Generated spitfire app
==> libgraph
Compiling 15 files (.ex)
Generated libgraph app
==> nimble_parsec
Compiling 4 files (.ex)
Generated nimble_parsec app
==> makeup
Compiling 15 files (.ex)
Generated makeup app
==> makeup_elixir
Compiling 6 files (.ex)
Compiling lib/makeup/lexers/elixir_lexer.ex (it's taking more than 10s)
Generated makeup_elixir app
==> xtweak_docs
Compiling 1 file (.ex)
Generated xtweak_docs app
===> Failed to restore /home/fodurrr/dev/xTweak/deps/unicode_util_compat/_build/prod/lib/.rebar3/rebar_compiler_erl/source.dag file. Discarding it.

===> Analyzing applications...
===> Compiling unicode_util_compat
===> Failed to restore /home/fodurrr/dev/xTweak/deps/idna/_build/prod/lib/.rebar3/rebar_compiler_erl/source.dag file. Discarding it.

===> Analyzing applications...
===> Compiling idna
===> Failed to restore /home/fodurrr/dev/xTweak/deps/telemetry/_build/prod/lib/.rebar3/rebar_compiler_erl/source.dag file. Discarding it.

===> Analyzing applications...
===> Compiling telemetry
==> telemetry_metrics
Compiling 7 files (.ex)
Generated telemetry_metrics app
===> Failed to restore /home/fodurrr/dev/xTweak/deps/telemetry_poller/_build/prod/lib/.rebar3/rebar_compiler_erl/source.dag file. Discarding it.

===> Analyzing applications...
===> Compiling telemetry_poller
==> ecto
Compiling 56 files (.ex)
Generated ecto app
==> thousand_island
Compiling 16 files (.ex)
Generated thousand_island app
==> db_connection
Compiling 18 files (.ex)
Generated db_connection app
==> phoenix_html
Compiling 6 files (.ex)
Generated phoenix_html app
==> phoenix_template
Compiling 4 files (.ex)
Generated phoenix_template app
==> expo
Compiling 2 files (.erl)
Compiling 22 files (.ex)
Generated expo app
==> gettext
Compiling 18 files (.ex)
Generated gettext app
==> phoenix_pubsub
Compiling 12 files (.ex)
Generated phoenix_pubsub app
==> json_xema
Compiling 4 files (.ex)
Generated json_xema app
==> dns_cluster
Compiling 1 file (.ex)
Generated dns_cluster app
==> dialyxir
Compiling 67 files (.ex)
Generated dialyxir app
==> splode
Compiling 5 files (.ex)
Generated splode app
==> glob_ex
Compiling 4 files (.ex)
Generated glob_ex app
==> rewrite
Compiling 13 files (.ex)
Generated rewrite app
==> credo
Compiling 251 files (.ex)
Generated credo app
==> plug
Compiling 1 file (.erl)
Compiling 40 files (.ex)
Generated plug app
==> open_api_spex
Compiling 80 files (.ex)
    warning: a struct for OpenApiSpex.Cast is expected on struct update:

        %OpenApiSpex.Cast{ctx | errors: ctx.errors ++ errors}

    but got type:

        dynamic()

    where "ctx" was given the type:

        # type: dynamic()
        # from: lib/open_api_spex/cast/one_of.ex:13:54
        {ctx, results, error_schemas}

    when defining the variable "ctx", you must also pattern match on "%OpenApiSpex.Cast{}".

    hint: given pattern matching is enough to catch typing errors, you may optionally convert the struct update into a map update. For example, instead of:

        user = some_function()
        %User{user | name: "John Doe"}

    it is enough to write:

        %User{} = user = some_function()
        %{user | name: "John Doe"}

    typing violation found at:
    │
 22 │             {%Cast{ctx | errors: ctx.errors ++ errors}, results, [schema | error_schemas]}
    │              ~
    │
    └─ (open_api_spex 3.22.0) lib/open_api_spex/cast/one_of.ex:22:14: OpenApiSpex.Cast.OneOf.cast/1

    warning: a struct for OpenApiSpex.Cast is expected on struct update:

        %OpenApiSpex.Cast{ctx | errors: ctx.errors ++ errors}

    but got type:

        dynamic(%{..., schema: %{..., allOf: non_empty_list(term(), term())}})

    where "ctx" was given the type:

        # type: dynamic(%{..., schema: %{..., allOf: non_empty_list(term(), term())}})
        # from: lib/open_api_spex/cast/all_of.ex:9:74
        %{schema: %{allOf: [%OpenApiSpex.Schema{} = schema | remaining]}} = ctx

    when defining the variable "ctx", you must also pattern match on "%OpenApiSpex.Cast{}".

    hint: given pattern matching is enough to catch typing errors, you may optionally convert the struct update into a map update. For example, instead of:

        user = some_function()
        %User{user | name: "John Doe"}

    it is enough to write:

        %User{} = user = some_function()
        %{user | name: "John Doe"}

    typing violation found at:
    │
 26 │           %Cast{ctx | errors: ctx.errors ++ errors},
    │           ~
    │
    └─ (open_api_spex 3.22.0) lib/open_api_spex/cast/all_of.ex:26:11: OpenApiSpex.Cast.AllOf.cast_all_of/2

    warning: a struct for OpenApiSpex.Cast is expected on struct update:

        %OpenApiSpex.Cast{new_ctx | errors: new_ctx.errors ++ errors}

    but got type:

        dynamic(map())

    where "new_ctx" was given the type:

        # type: dynamic(map())
        # from: lib/open_api_spex/cast/any_of.ex:20:13
        new_ctx = Map.update!(ctx, :schema, fn x -> Map.update!(x, :anyOf, fn _ -> remaining end) end)

    when defining the variable "new_ctx", you must also pattern match on "%OpenApiSpex.Cast{}".

    hint: given pattern matching is enough to catch typing errors, you may optionally convert the struct update into a map update. For example, instead of:

        user = some_function()
        %User{user | name: "John Doe"}

    it is enough to write:

        %User{} = user = some_function()
        %{user | name: "John Doe"}

    typing violation found at:
    │
 35 │           %Cast{new_ctx | errors: new_ctx.errors ++ errors},
    │           ~
    │
    └─ (open_api_spex 3.22.0) lib/open_api_spex/cast/any_of.ex:35:11: OpenApiSpex.Cast.AnyOf.cast_any_of/3

    warning: Inspect.Map.inspect/4 is undefined or private. Did you mean:

        * inspect/2

    │
 17 │     Inspect.Map.inspect(map, "OpenApiSpex.Schema", infos, opts)
    │                 ~
    │
    └─ (open_api_spex 3.22.0) lib/open_api_spex/inspect/for_schema.ex:17:17: Inspect.OpenApiSpex.Schema.inspect/2

Generated open_api_spex app
==> postgrex
Compiling 69 files (.ex)
Generated postgrex app
==> ecto_sql
Compiling 25 files (.ex)
Generated ecto_sql app
==> joken
Compiling 8 files (.ex)
Generated joken app
==> crux
Compiling 19 files (.ex)
Generated crux app
==> nimble_pool
Compiling 2 files (.ex)
Generated nimble_pool app
==> finch
Compiling 14 files (.ex)
Generated finch app
==> req
Compiling 19 files (.ex)
Generated req app
==> igniter
Compiling 60 files (.ex)
Generated igniter app
==> spark
Compiling 40 files (.ex)
Generated spark app
==> reactor
Compiling 112 files (.ex)
Generated reactor app
==> ash
Compiling 541 files (.ex)
Compiling lib/ash/reactor/reactor.ex (it's taking more than 10s)
Compiling lib/ash/resource/dsl.ex (it's taking more than 10s)
Generated ash app
==> ash_sql
Compiling 14 files (.ex)
Generated ash_sql app
==> ash_postgres
Compiling 57 files (.ex)
Generated ash_postgres app
==> usage_rules
Compiling 5 files (.ex)
Generated usage_rules app
==> langchain
Compiling 57 files (.ex)
     warning: a struct for LangChain.Chains.LLMChain is expected on struct update:

         %LangChain.Chains.LLMChain{chain | llm: llm}

     but got type:

         dynamic()

     where "chain" was given the type:

         # type: dynamic()
         # from: lib/chains/llm_chain.ex:576:27
         chain

     when defining the variable "chain", you must also pattern match on "%LangChain.Chains.LLMChain{}".

     hint: given pattern matching is enough to catch typing errors, you may optionally convert the struct update into a map update. For example, instead of:

         user = some_function()
         %User{user | name: "John Doe"}

     it is enough to write:

         %User{} = user = some_function()
         %{user | name: "John Doe"}

     typing violation found at:
     │
 579 │     use_chain = %LLMChain{chain | llm: llm}
     │                 ~
     │
     └─ (langchain 0.4.0) lib/chains/llm_chain.ex:579:17: LangChain.Chains.LLMChain.try_chain_with_llm/4

      warning: a struct for LangChain.MessageDelta is expected on struct update:

          %LangChain.MessageDelta{delta | status: :complete}

      but got type:

          dynamic()

      where "delta" was given the type:

          # type: dynamic()
          # from: lib/chains/llm_chain.ex:1408:44
          %LangChain.Chains.LLMChain{delta: delta} = chain

      when defining the variable "delta", you must also pattern match on "%LangChain.MessageDelta{}".

      hint: given pattern matching is enough to catch typing errors, you may optionally convert the struct update into a map update. For example, instead of:

          user = some_function()
          %User{user | name: "John Doe"}

      it is enough to write:

          %User{} = user = some_function()
          %{user | name: "John Doe"}

      typing violation found at:
      │
 1412 │     case MessageDelta.to_message(%MessageDelta{delta | status: :complete}) do
      │                                  ~
      │
      └─ (langchain 0.4.0) lib/chains/llm_chain.ex:1412:34: LangChain.Chains.LLMChain.cancel_delta/2

Generated langchain app
==> assent
Compiling 40 files (.ex)
Generated assent app
==> ash_authentication
Compiling 169 files (.ex)
     warning: a struct for URI is expected on struct update:

         %URI{uri | path: path}

     but got type:

         dynamic()

     where "uri" was given the type:

         # type: dynamic()
         # from: lib/ash_authentication/strategies/oauth2/plug.ex:255:21
         {:ok, uri} <- URI.new(redirect_uri)

     when defining the variable "uri", you must also pattern match on "%URI{}".

     hint: given pattern matching is enough to catch typing errors, you may optionally convert the struct update into a map update. For example, instead of:

         user = some_function()
         %User{user | name: "John Doe"}

     it is enough to write:

         %User{} = user = some_function()
         %{user | name: "John Doe"}

     typing violation found at:
     │
 265 │       {:ok, to_string(%URI{uri | path: path})}
     │                       ~
     │
     └─ (ash_authentication 4.12.0) lib/ash_authentication/strategies/oauth2/plug.ex:265:23: AshAuthentication.Strategy.OAuth2.Plug.build_redirect_uri/2

Generated ash_authentication app
==> tailwind
Compiling 3 files (.ex)
Generated tailwind app
==> websock
Compiling 1 file (.ex)
Generated websock app
==> bandit
Compiling 54 files (.ex)
Generated bandit app
==> websock_adapter
Compiling 4 files (.ex)
Generated websock_adapter app
==> phoenix
Compiling 74 files (.ex)
Generated phoenix app
==> phoenix_live_view
Compiling 49 files (.ex)
Generated phoenix_live_view app
==> ash_phoenix
Compiling 35 files (.ex)
     warning: unknown key .transform_errors in expression:

         form.transform_errors

     the given type does not have the given key:

         dynamic(%AshPhoenix.FilterForm.Arguments{
           input: term(),
           params: term(),
           arguments: term(),
           errors: term()
         })

     where "form" was given the type:

         # type: dynamic(%AshPhoenix.FilterForm.Arguments{})
         # from: lib/ash_phoenix/filter_form/arguments.ex:120:17
         form

     typing violation found at:
     │
 123 │           transform_errors: form.transform_errors,
     │                                  ~~~~~~~~~~~~~~~~
     │
     └─ (ash_phoenix 2.3.17) lib/ash_phoenix/filter_form/arguments.ex:123:34: Phoenix.HTML.FormData.AshPhoenix.FilterForm.Arguments.to_form/4

Generated ash_phoenix app
==> xtweak_core
Compiling 6 files (.ex)
Generated xtweak_core app
==> xtweak_ui
Compiling 6 files (.ex)
Generated xtweak_ui app
==> phoenix_live_dashboard
Compiling 36 files (.ex)
Generated phoenix_live_dashboard app
==> phoenix_live_reload
Compiling 5 files (.ex)
Generated phoenix_live_reload app
==> tidewave
Compiling 14 files (.ex)
Generated tidewave app
==> ash_json_api
Compiling 68 files (.ex)
warning: Entity without __spark_metadata__ field is deprecated. Entity AshJsonApi.Domain.BaseRoute does not define a `__spark_metadata__` field. This field is required to access source annotations. Add `__spark_metadata__: nil` to the defstruct for AshJsonApi.Domain.BaseRoute.
  (elixir 1.19.1) lib/enum.ex:961: Enum."-each/2-lists^foreach/1-0-"/2
  (spark 2.3.11) lib/spark/dsl/extension.ex:2222: Spark.Dsl.Extension.__after_verify__/1
  (elixir 1.19.1) lib/enum.ex:961: Enum."-each/2-lists^foreach/1-0-"/2
  (elixir 1.19.1) lib/module/parallel_checker.ex:285: Module.ParallelChecker.check_module/3
  (elixir 1.19.1) lib/module/parallel_checker.ex:122: anonymous fn/7 in Module.ParallelChecker.inner_spawn/6

warning: Entity without __spark_metadata__ field is deprecated. Entity AshJsonApi.Resource.Route does not define a `__spark_metadata__` field. This field is required to access source annotations. Add `__spark_metadata__: nil` to the defstruct for AshJsonApi.Resource.Route.
  (elixir 1.19.1) lib/enum.ex:961: Enum."-each/2-lists^foreach/1-0-"/2
  (spark 2.3.11) lib/spark/dsl/extension.ex:2222: Spark.Dsl.Extension.__after_verify__/1
  (elixir 1.19.1) lib/enum.ex:961: Enum."-each/2-lists^foreach/1-0-"/2
  (elixir 1.19.1) lib/module/parallel_checker.ex:285: Module.ParallelChecker.check_module/3
  (elixir 1.19.1) lib/module/parallel_checker.ex:122: anonymous fn/7 in Module.ParallelChecker.inner_spawn/6

warning: Entity without __spark_metadata__ field is deprecated. Entity AshJsonApi.Resource.Route does not define a `__spark_metadata__` field. This field is required to access source annotations. Add `__spark_metadata__: nil` to the defstruct for AshJsonApi.Resource.Route.
  (elixir 1.19.1) lib/enum.ex:961: Enum."-each/2-lists^foreach/1-0-"/2
  (spark 2.3.11) lib/spark/dsl/extension.ex:2222: Spark.Dsl.Extension.__after_verify__/1
  (elixir 1.19.1) lib/enum.ex:961: Enum."-each/2-lists^foreach/1-0-"/2
  (elixir 1.19.1) lib/module/parallel_checker.ex:285: Module.ParallelChecker.check_module/3
  (elixir 1.19.1) lib/module/parallel_checker.ex:122: anonymous fn/7 in Module.ParallelChecker.inner_spawn/6

     warning: a struct for Plug.Conn is expected on struct update:

         %Plug.Conn{conn | private: Map.put(conn.private, AshJsonApi.Plug.Parser, content)}

     but got type:

         dynamic()

     where "conn" was given the type:

         # type: dynamic()
         # from: lib/ash_json_api/plug/parser.ex:139:10
         {:ok, data, acc, conn}

     when defining the variable "conn", you must also pattern match on "%Plug.Conn{}".

     hint: given pattern matching is enough to catch typing errors, you may optionally convert the struct update into a map update. For example, instead of:

         user = some_function()
         %User{user | name: "John Doe"}

     it is enough to write:

         %User{} = user = some_function()
         %{user | name: "John Doe"}

     typing violation found at:
     │
 148 │              %Plug.Conn{conn | private: Map.put(conn.private, __MODULE__, content)},
     │              ~
     │
     └─ (ash_json_api 1.4.45) lib/ash_json_api/plug/parser.ex:148:14: AshJsonApi.Plug.Parser.reduce_part/4

Generated ash_json_api app
==> ash_ai
Compiling 31 files (.ex)
Generated ash_ai app
==> swoosh
Compiling 54 files (.ex)
Generated swoosh app
==> xtweak_web
Compiling 15 files (.ex)
Generated xtweak_web app
